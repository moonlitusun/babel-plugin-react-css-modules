/* global __dirname */

import fs from 'node:fs';
import path from 'node:path';

import MiniCssExtractPlugin from 'mini-css-extract-plugin';
import webpack from 'webpack';
import runner from '@babel/helper-plugin-test-runner';

import {
  getLocalIdent,
} from '../src/utils';

/**
 * Creates Webpack compiler instance, providing it with all configs we need
 * in our tests, beside a few customizeable options.
 * @param {object} ops Options.
 * @param {string} ops.entry Webpack's entry points.
 * @param {object} ops.cssLoaderOps Options to use for css-loader.
 * @returns {object} Webpack compiler.
 */
function newWebpackCompiler({ cssLoaderOps, entry }) {
  const compiler = webpack({
    context: path.resolve(__dirname, '..'),
    entry,
    mode: 'production',
    module: {
      rules: [{
        test: /\.css$/u,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: cssLoaderOps,
          },
        ],
      }],
    },
    plugins: [
      new MiniCssExtractPlugin({ filename: '[id].css' }),
    ],
  });
  compiler.hooks.shouldEmit.tap('Test', () => false);
  return compiler;
}

/**
 * Runs a Webpack-base test:
 *  - It runs Webpack compilation of the CSS file specified by `entry` option,
 *    using other Webpack-related options passed into this function.
 *  - It extracts classnames from the Webpack-generated CSS bundle.
 *  - It compares that each classname generated by Webpack is present
 *    in the Babel compilation output, pointed by `babelOutput`.
 * @param {object} ops Options.
 * @param {string} ops.babelOutput Babel output file to use, relative to
 *  the fixtures folder.
 * @param {object} ops.cssLoaderOps Options to use for css-loader.
 * @param {string} ops.entry Webpack's entry points, relative to
 *  the fixtures folder.
 * @returns {object} Webpack compiler.
 */
function runWebpackTest({ babelOutput, cssLoaderOps, entry }) {
  return new Promise((resolve, reject) => {
    const compiler = newWebpackCompiler({
      cssLoaderOps,
      entry: `./test/fixtures/${entry}`,
    });
    compiler.run((error, stats) => {
      try {
        // Extracts compiled CSS from the Webpack compilation stats.
        const cssChunkName = Object.keys(stats.compilation.assets)
          .find((key) => key.endsWith('.css'));

        /* eslint-disable no-underscore-dangle */
        let asset = stats.compilation.assets[cssChunkName];
        if (asset._source) asset = asset._source;

        const compiledCss = asset._value
          || asset._children.map(({ _value }) => _value).join('\n');
        const classNames = compiledCss.match(/\.(\w|-)*/gu);
        /* eslint-enable no-underscore-dangle */

        // Gets outputs of Babel compilation, and checks that they contain
        // each classname generated by Webpack (css-loader).
        const babelOutputJs = fs.readFileSync(
          `${__dirname}/fixtures/${babelOutput}`,
          'utf8',
        );
        for (let i = 0; i < classNames.length; ++i) {
          const name = classNames[i];
          if (!babelOutputJs.includes(`"${name.slice(1)}"`)) {
            throw Error(
              `Babel output:\n\n${babelOutputJs}\n\nMisses class: ${name}`,
            );
          }
        }
        resolve();
      } catch (e) {
        reject(e);
      }
    });
  });
}

// Runs Babel on test cases inside ./fixtures folder,
// using @babel/helper-plugin-test-runner, and verifies
// that outputs match expected values.
runner(__dirname);

// These are Webpack-based tests, comparing that outputs of Babel compilation
// match results of css-loader CSS processing.
describe('css-loader compatibility', () => {
  it(
    'compatible with the default getLocalIdent()',
    () => runWebpackTest({
      babelOutput: 'css-loader_compatibility/generated_hashes/output.mjs',
      cssLoaderOps: {
        modules: { localIdentName: '[path]__[local]__[hash:base64:5]' },
      },
      entry: 'css-loader_compatibility/generated_hashes/style.css',
    }),
  );

  it(
    'compatible with the "stable" getLocalIdent()',
    () => runWebpackTest({
      babelOutput: 'css-loader_compatibility/stable_classnames/output.mjs',
      cssLoaderOps: {
        modules: {
          getLocalIdent,
          localIdentName: '[path]__[local]__[hash:base64:5]',
        },
      },
      entry: 'css-loader_compatibility/stable_classnames/style.css',
    }),
  );
});
